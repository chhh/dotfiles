[alias]

  # delete remote branch, allowing remotes/origin in the branch name 
  delete-remote = "!f() { \
    replaced=$(echo "$1" | awk '{gsub(/^remotes\\/[^\\/]*\\//, \"\")}{print}'); \
    echo "executing: git push -d origin $replaced"; \
    git push -d origin "$replaced"; \
  }; f"

  # alternative push -d origin using shell string substitution:
  delete-remote-alt = "!f() { git push -d origin \"${1#remotes/*/}\"; }; f"
  
  cot = !git checkout --track
  push-init = !git push -u origin `git branch --show-current`
  push-force = !git push -fu
  menff = merge --no-ff

  # merge remote branch into current, allowing remotes/ or origin/ prefix to be omitted
  merge-remote = "!f() { \
    replaced=$(echo "$1" | awk '{gsub(/^remotes\\/[^\\/]*\\//, \"\")}{print}'); \
    replaced=$(echo "$replaced" | awk '{gsub(/^origin\\//, \"\")}{print}'); \
    replaced="origin/$replaced"; \
    echo "executing: merge $replaced"; \
  }; f"

  # detach HEAD
  detach = checkout --detach
  
  # detach HEAD and delete the branch we were on
  detach-delete = "!f() { \
    cur=$(git branch --show-current); \
    echo "deleting branch: $cur"; \
    git checkout --detach; \
    git branch -d $cur; \
  }; f"


  # detach, delete given local branch, checkout fresh remote-tracking
  rebranch = "!f() { \
    BRANCH=${1}; \
    git checkout --detach; \
    git branch -d "$BRANCH"; \
    git cot "origin/$BRANCH"; \
  }; f"

  remaster = rebranch master
  rerelease = rebranch release/2021.09



  mob3d = !gitk --date-order --glob=*MOB* --since=3.days
  mob1w = !gitk --date-order --glob=*MOB* --since=1.week
  mob1m = !gitk --date-order --glob=*MOB* --since=1.month
  mob   = !gitk --date-order --glob=*MOB* --since=1.month
  mob6m = !gitk --date-order --glob=*MOB* --since=6.months

  view-cur = !gitk --since=1.week
  view = !gitk --date-order --all --since=1.week
  view-all = !gitk --date-order --all
  view1d = !gitk --date-order --all --since=1.day
  view3d = !gitk --date-order --all --since=3.days
  view1w = !gitk --date-order --all --since=1.week
  view1m = !gitk --date-order --all --since=1.month
  view3m = !gitk --date-order --all --since=3.months
  view6m = !gitk --date-order --all --since=6.months

  hide = update-index --assume-unchanged
  unhide = update-index --no-assume-unchanged
  unhide-all = ! git ls-files -v | grep '^[a-z]' | cut -c3- | xargs git unhide --
  hidden = ! git ls-files -v | grep '^[a-z]' | cut -c3-

  # template/stub for functional git aliases
  # my_alias = "!f() { 〈your complex command〉 }; f"

  # edit git config with default text editor
  ec = config --global -e

  # run before each commit :)
  pre = diff --cached --diff-algorithm=minimal -w

  # {add all commit message} commit all changed/new files with a message
  # this is the same as 'savem' alias
  aacm = !git add -A && git commit -m 

  fa = fetch --all --prune
  fp = fetch --prune
  up = !git pull --rebase --autostash --prune $@ && git submodule update --init --recursive
  
  # push everything including tags to default remote
  pt = !git push && git push --tags
  
  # push current branch to origin, tracking it
  pc = !git push -u origin $(git rev-parse --abbrev-ref HEAD)

  # push branch to several remotes
  ptr = "!f() { \
    for remote in "$@"; do git push "$remote"; done \
  }; f"

  # push branch and tags to several remotes
  pttt = "!f() { \
    for remote in "$@"; do git push "$remote" && git push --tags "$remote"; done \
  }; f"

  cob = checkout -b
  
  # save work as it goes, see 'undo' to use in tandem
  save = !git add -A && git commit -m 'SAVEPOINT'
  # same as 'aacm'
  savem = !git add -A && git commit -m 
  wip = commit -am "WIP"
  svp = !git save && git push

  # reset to the previous commit, leaving changes in the work tree
  # this is useful in combination with aliases 'save' and 'wip'
  undo = reset HEAD~1 --mixed

  amend = commit -a --amend

  # commit, amend all
  caa = commit -a --amend -C HEAD

  # a proper reset, that doesn't immediately make you loose everything
  # you can still retrieve the changes from reflog
  wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard

  # delete all local branches that have been merged into master (or the 
  # branch that you specify as the argument to this alias)
  # ${1-master} in shell script means: $1 (the 1st arguemnt) or default to 'master' if $1 not set
  bclean = "!f() { git checkout ${1-master} && git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs git branch -d; }; f"
  bdone = "!f() { git checkout ${1-master} && git up && git bclean ${1-master}; }; f"

  # Delete a branch/tag both locally and remotely
  nuke-on = "!f() { \
      git push ${1} :$2; \
      git branch -d $2; \
      git tag -d $2; \
  }; f"
  
  # Delete tags matching pattern both locally and remotely. $1 - remote, $2 - pattern
  # nuke-tags-on = "!f() { \
  #     git push -d $; \
  #     git branch -d $2; \
  #     git tag -d $2; \
  # }; f"

  # Delete a tag both locally and remotely (by default on Origin)
  nuke = "!f() { \
      git push origin --delete "$@"; \
      git branch -d "$@"; \
      git tag -d "$@"; \
  }; f"

  # same as 'nuke'
  nuke-on-origin = "!f() { \
      git push origin --delete "$@"; \
      git branch -d "$@"; \
      git tag -d "$@"; \
  }; f"

  # 'fast-forward tracking' branches except for the checked out one, for this use `git pull --ff-only` or just `ff`
  fft = !sh -c 'git branch --format \"%(if)%(upstream:short)%(then)git push . %(upstream:short):%(refname:short)%(end)\" | sh' -
  ff = pull --ff-only
  
  # shows branches that are not present on remote named origin
  list-local = !git branch -r | awk '{print $1}' | egrep -v -f /dev/fd/0 <(git branch -vv | grep origin) | awk '{print $1}'
